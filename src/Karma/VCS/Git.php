<?php

namespace Karma\VCS;

use Gaufrette\Filesystem;
use Karma\Finder;

class Git implements Vcs
{
    const
        KARMA_COMMENT = '# Files generated by Karma';

    private
        $command,
        $fs,
        $ignoredFiles,
        $trackedFiles;

    public function __construct(Filesystem $fs, $rootDirectory, Git\CommandLauncher $command)
    {
        $this->command = $command;
        $this->command->initialize($rootDirectory);

        $this->fs = $fs;

        $this->ignoredFiles = null;
        $this->trackedFiles = null;
    }

    public function isTracked($filepath)
    {
        if($this->trackedFiles === null)
        {
            $this->trackedFiles = $this->getTrackedFiles();
        }

        return in_array($filepath, $this->trackedFiles);
    }

    private function getTrackedFiles()
    {
        $output = $this->command->run(array(
            'ls-files'
        ));

        $lines = explode("\n", $output);
        array_walk($lines, 'trim');

        return $lines;
    }

    public function untrackFile($filepath)
    {
        if($this->isTracked($filepath) === false)
        {
            return false;
        }

        $this->command->run(array(
            'rm',
            '--cached',
            $filepath
        ));

        return true;
    }

    public function isIgnored($filepath)
    {
        if($this->ignoredFiles === null)
        {
            $this->collectIgnoredFiles();
        }

        return in_array($filepath, $this->ignoredFiles);
    }

    private function collectIgnoredFiles()
    {
        $finder = new Finder($this->fs);
        $ignoredLists = $finder->findFiles('~(^.gitignore|/.gitignore)$~');

        $this->ignoredFiles = array();
        foreach($ignoredLists as $list)
        {
            $this->collectIgnoredFilesFromOneIgnoreFile($list);
        }

        return false;
    }

    private function collectIgnoredFilesFromOneIgnoreFile($ignoreFile)
    {
        $content = $this->fs->read($ignoreFile);
        $lines = explode("\n", $content);

        foreach($lines as $line)
        {
            $line = trim($line);

            // ignore comments
            if(stripos($line, '#') === 0)
            {
                continue;
            }

            $this->ignoredFiles[] = $line;
        }
    }

    public function ignoreFile($filepath)
    {
        if($this->isIgnored($filepath) === true)
        {
            return;
        }

        $lines = $this->loadIgnoreFileContent();

        $titleLineNumber = array_search(self::KARMA_COMMENT, $lines);
        if($titleLineNumber === false)
        {
            $titleLineNumber = count($lines);

            // ensure an empty line preceeds comment
            if(! empty($lines[$titleLineNumber - 1]))
            {
                $lines[$titleLineNumber] = '';
                $titleLineNumber++;
            }
        }

        $lines[$titleLineNumber] = sprintf("%s\n%s", self::KARMA_COMMENT, $filepath);

        $content = implode("\n", $lines);
        $this->fs->write('.gitignore', $content, true);
    }

    private function loadIgnoreFileContent($filename = '.gitignore')
    {
        $lines = array();

        if($this->fs->has($filename))
        {
            $content = $this->fs->read($filename);
            $lines = explode("\n", $content);

            array_walk($lines, 'trim');
        }

        return $lines;
    }
}
